/*
 * Copyright (c) 2017, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.oracle.truffle.llvm.runtime.debug.scope;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.source.Source;
import com.oracle.truffle.api.source.SourceSection;

public final class LLVMSourceLocation {

    private LLVMSourceLocation parent;
    private LLVMSourceFile file;

    private final int line;
    private final int column;

    public LLVMSourceLocation(long line, long column) {
        this.line = (int) line;
        this.column = (int) column;
        this.parent = null;
        this.file = null;
    }

    public void setParent(LLVMSourceLocation parent) {
        this.parent = parent;
    }

    public void setFile(LLVMSourceFile file) {
        this.file = file;
    }

    public void copyFile(LLVMSourceLocation source) {
        setFile(getScopeFile(source));
    }

    private SourceSection resolvedSection = null;

    public SourceSection getSourceSection() {
        return getSourceSection(false);
    }

    public SourceSection getSourceSection(boolean needsLength) {
        if (resolvedSection != null) {
            return resolvedSection;
        }

        final LLVMSourceFile scopeFile = getScopeFile(this);
        if (scopeFile != null) {
            buildSection(scopeFile, needsLength);
        }

        return resolvedSection;
    }

    @TruffleBoundary
    private Source getSource(LLVMSourceFile scopeFile) {
        Source source = null;
        if (scopeFile != null) {
            source = scopeFile.toSource();
        }

        if (source != null) {
            return source;
        }

        // build an empty source to at least preserve the information we have
        int startLine = line >= 0 ? line : 1;
        final StringBuilder builder = new StringBuilder();
        for (int i = 1; i < startLine; i++) {
            builder.append('\n');
        }
        for (int i = 0; i <= column; i++) {
            builder.append(' ');
        }
        builder.append('\n');

        final String name = LLVMSourceFile.toName(scopeFile);
        final String mimeType = LLVMSourceFile.getMimeType(name);
        return Source.newBuilder(builder.toString()).mimeType(mimeType).name(name).build();
    }

    private void buildSection(LLVMSourceFile scopeFile, boolean needsLength) {
        try {
            Source source = getSource(scopeFile);
            if (source == null) {
                return;

            } else if (line <= 0) {
                // this happens e.g. for functions implicitly generated by llvm in section
                // '.text.startup'
                resolvedSection = source.createSection(1);

            } else if (column <= 0) {
                // columns in llvm 3.2 metadata are usually always 0
                resolvedSection = source.createSection(line);

            } else {
                resolvedSection = source.createSection(line, column, 0);
            }

            if (needsLength) {
                final int length = source.getLength() - resolvedSection.getCharIndex();
                resolvedSection = source.createSection(line, column, length);
            }

        } catch (Throwable ignored) {
            // if the source file has changed since it was last compiled the line and column
            // information in the metadata might not be accurate anymore
        }
    }

    private static LLVMSourceFile getScopeFile(LLVMSourceLocation source) {
        for (LLVMSourceLocation scope = source; scope != null; scope = scope.parent) {
            if (scope.file != null) {
                return scope.file;
            }
        }
        return null;
    }
}
